// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/gardener/gardener/pkg/apis/extensions/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeWorkerPoolConfigs implements WorkerPoolConfigInterface
type FakeWorkerPoolConfigs struct {
	Fake *FakeExtensionsV1alpha1
	ns   string
}

var workerpoolconfigsResource = schema.GroupVersionResource{Group: "extensions.gardener.cloud", Version: "v1alpha1", Resource: "workerpoolconfigs"}

var workerpoolconfigsKind = schema.GroupVersionKind{Group: "extensions.gardener.cloud", Version: "v1alpha1", Kind: "WorkerPoolConfig"}

// Get takes name of the workerPoolConfig, and returns the corresponding workerPoolConfig object, and an error if there is any.
func (c *FakeWorkerPoolConfigs) Get(name string, options v1.GetOptions) (result *v1alpha1.WorkerPoolConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(workerpoolconfigsResource, c.ns, name), &v1alpha1.WorkerPoolConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.WorkerPoolConfig), err
}

// List takes label and field selectors, and returns the list of WorkerPoolConfigs that match those selectors.
func (c *FakeWorkerPoolConfigs) List(opts v1.ListOptions) (result *v1alpha1.WorkerPoolConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(workerpoolconfigsResource, workerpoolconfigsKind, c.ns, opts), &v1alpha1.WorkerPoolConfigList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.WorkerPoolConfigList{ListMeta: obj.(*v1alpha1.WorkerPoolConfigList).ListMeta}
	for _, item := range obj.(*v1alpha1.WorkerPoolConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested workerPoolConfigs.
func (c *FakeWorkerPoolConfigs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(workerpoolconfigsResource, c.ns, opts))

}

// Create takes the representation of a workerPoolConfig and creates it.  Returns the server's representation of the workerPoolConfig, and an error, if there is any.
func (c *FakeWorkerPoolConfigs) Create(workerPoolConfig *v1alpha1.WorkerPoolConfig) (result *v1alpha1.WorkerPoolConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(workerpoolconfigsResource, c.ns, workerPoolConfig), &v1alpha1.WorkerPoolConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.WorkerPoolConfig), err
}

// Update takes the representation of a workerPoolConfig and updates it. Returns the server's representation of the workerPoolConfig, and an error, if there is any.
func (c *FakeWorkerPoolConfigs) Update(workerPoolConfig *v1alpha1.WorkerPoolConfig) (result *v1alpha1.WorkerPoolConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(workerpoolconfigsResource, c.ns, workerPoolConfig), &v1alpha1.WorkerPoolConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.WorkerPoolConfig), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeWorkerPoolConfigs) UpdateStatus(workerPoolConfig *v1alpha1.WorkerPoolConfig) (*v1alpha1.WorkerPoolConfig, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(workerpoolconfigsResource, "status", c.ns, workerPoolConfig), &v1alpha1.WorkerPoolConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.WorkerPoolConfig), err
}

// Delete takes name of the workerPoolConfig and deletes it. Returns an error if one occurs.
func (c *FakeWorkerPoolConfigs) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(workerpoolconfigsResource, c.ns, name), &v1alpha1.WorkerPoolConfig{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeWorkerPoolConfigs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(workerpoolconfigsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.WorkerPoolConfigList{})
	return err
}

// Patch applies the patch and returns the patched workerPoolConfig.
func (c *FakeWorkerPoolConfigs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.WorkerPoolConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(workerpoolconfigsResource, c.ns, name, pt, data, subresources...), &v1alpha1.WorkerPoolConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.WorkerPoolConfig), err
}
